name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Build
      run: cargo build --verbose

  test:
    name: test
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    # Cache Docker layers
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.docker-cache
        key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Load Docker cache
      run: |
        mkdir -p /tmp/.docker-cache
        if [ -f /tmp/.docker-cache/cache.tar ]; then
          docker load < /tmp/.docker-cache/cache.tar
        fi

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t gramine-sdk . --cache-from /tmp/.docker-cache

    - name: Save Docker cache
      run: |
        mkdir -p /tmp/.docker-cache
        docker save gramine-sdk > /tmp/.docker-cache/cache.tar

    - name: Run tests
      run: docker run -v $(pwd):/workspace/benchmark -w /workspace/benchmark gramine-sdk /bin/sh -c ". /root/.cargo/env; cargo test --verbose"
