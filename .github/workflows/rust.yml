name: Build and run tests

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - ./.github/workflows/docs.yml
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - ./.github/workflows/docs.yml

jobs:
  main:
    name: clippy and test
    runs-on: ubuntu:24.04

    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - uses: actions/cache@v4
      id: cache
      with:
        path: |
          /var/cache/apt/archives
          /tmp/gramine-1.8/
        key: ${{ runner.os }}-${{ hashFiles('dev/setup_host.sh') }}
        restore-keys: |
          ${{ runner.os }}-
    
    - name: Setup host 
      if: steps.cache-docker-image.outputs.cache-hit != 'true'
      run: |
        # install deps
        sudo apt-get update && sudo apt-get install -y build-essential clang \
        clang llvm-dev python3-dev libbpf-dev git clang autoconf bison gawk meson nasm \
        pkg-config python3 python3-click python3-jinja2 python3-pyelftools python3-tomli \
        python3-tomli-w python3-voluptuous wget cmake libprotobuf-c-dev protobuf-c-compiler \
        protobuf-compiler python3-cryptography python3-pip python3-protobuf curl linux-tools-`uname -r`

        # install sgx core libraries
        echo 'deb [signed-by=/etc/apt/keyrings/intel-sgx-keyring.asc arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu noble main' | \
        sudo tee /etc/apt/sources.list.d/intel-sgx.list  

        wget https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key
        cat intel-sgx-deb.key| sudo tee /etc/apt/keyrings/intel-sgx-keyring.asc > /dev/null
        
        sudo apt-get update && sudo apt-get install -y libsgx-dcap-quote-verify-dev libsgx-epid libsgx-quote-ex libsgx-dcap-ql

        # get gramine
        curl -o /tmp/graminev1.8.tar.gz -fL https://github.com/gramineproject/gramine/archive/refs/tags/v1.8.tar.gz
        tar xvf /tmp/gramine-1.8.tar.gz -C /tmp
        cd /tmp/gramine-1.8/

        # build and install gramine
        meson setup build --buildtype=debugoptimized -Dsgx=enabled -Ddirect=disabled -Ddcap=disabled 
        ninja -C build/
        sudo ninja -C build/ install

    - name: Setup host from cache
      if: steps.cache-docker-image.outputs.cache-hit == 'true'
      run: |
        # install deps
        sudo apt-get update && sudo apt-get install -y build-essential clang \
        clang llvm-dev python3-dev libbpf-dev git clang autoconf bison gawk meson nasm \
        pkg-config python3 python3-click python3-jinja2 python3-pyelftools python3-tomli \
        python3-tomli-w python3-voluptuous wget cmake libprotobuf-c-dev protobuf-c-compiler \
        protobuf-compiler python3-cryptography python3-pip python3-protobuf curl linux-tools-`uname -r` \
        libsgx-dcap-quote-verify-dev libsgx-epid libsgx-quote-ex libsgx-dcap-ql

        # install gramine
        cd /tmp/gramine-1.8/
        sudo ninja -C build/ install

    - name: Create vmlinux.h 
      run: bpftool btf dump file /sys/kernel/btf/vmlinux format c > src/bpf/vmlinux.h

    - uses: Swatinem/rust-cache@v2
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: clippy, rustfmt

    - name: Run clippy and format
      run: |
        rustup component add clippy rustfmt 2> /dev/null
        cargo fmt --all -- --check
        cargo clippy --all -- -D warnings

    - name: Run test
      run: cargo test -- --skip collector --verbose
