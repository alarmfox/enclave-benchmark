#!/bin/bash

show_command() {
	echo "+ $@"
	$@
}

cores() {
	lscpu -b -p=CORE,SOCKET | grep -v '^#' | sort | uniq | wc -l
}

COMPILERS=(
	gcc
	clang
	#icc
)

ARGS=( $@ )
if [[ ${#ARGS[@]} -eq 0 ]]; then
	ARGS=(--bodies 96 --cycle-after 4 --iterations 1 --verbose --no-crosscheck)
fi

BUILT_SOMETHING=0

for COMPILER in ${COMPILERS[@]}; do
	NBODY=build-${COMPILER}/nbody
	BUILDINFO=${NBODY}.buildinfo

	[[ -x ${NBODY} ]] && continue

	type -P ${COMPILER} &>/dev/null || continue

	echo
	echo "Building with ${COMPILER}..."

	if [[ ${ALLOW_CUDA:-1} -gt 0 ]] && type -P nvcc &>/dev/null; then
		CUDA_PRESENT=1
	else
		CUDA_PRESENT=0
	fi
	[[ ${COMPILER} == icc ]] && CUDA_PRESENT=0
	echo "CUDA Present: ${CUDA_PRESENT}"

	EXTRA_MESON_ARGS=()

	if [[ $CUDA_PRESENT -gt 0 ]]; then
		EXTRA_MESON_ARGS+=(-Duse_cuda=true)
	fi

	export -n CC CXX NVCC CXXFLAGS LIBRARY_PATH

	case $COMPILER in
		gcc)
			export CC=gcc CXX=g++
			;;
		clang)
			export CC=clang CXX=clang++
			EXTRA_MESON_ARGS+=(-Dnvcc=clang++)
			;;
		icc)
			export CC=icc CXX=icpc
			;;
	esac

	meson . build-${COMPILER} ${EXTRA_MESON_ARGS[@]} || continue
	ninja -C build-${COMPILER} || continue

	rm -f ${BUILDINFO}
	${CXX} --version > ${BUILDINFO}

	# gcc outputs an extra newline, so we can skip the blank echo here
	[[ ${CXX} != g++ ]] && echo >> ${BUILDINFO}

	[[ $CUDA_PRESENT -gt 0 ]] && nvcc --version >> ${BUILDINFO}

	echo >> ${BUILDINFO}
	(echo -n "n-body version: "; git describe --tags) >> ${BUILDINFO}

	echo >> ${BUILDINFO}
	echo "Binary size: $(wc -c ${NBODY} | awk '{ print $ 1 }') bytes" >> ${BUILDINFO}

	BUILT_SOMETHING=1
done

if [[ $BUILT_SOMETHING -gt 0 ]]; then
	echo
	echo "============================================"
fi
echo

lscpu | grep -v ^Vulnerability | fmt -t -w 110
echo
nvidia-smi -L | sed 's/\s(UUID.*$//'
echo
uname -srm

for COMPILER in ${COMPILERS[@]}; do
	NBODY=build-${COMPILER}/nbody

	if [[ ! -x ${NBODY} ]]; then
		continue
	fi

	echo
	echo "============================================"
	echo
	cat ${NBODY}.buildinfo
	echo

	OMP_PARAMS=(
		OMP_NUM_THREADS=$(cores)
		KMP_AFFINITY=scatter
	)

	# Do a quick warm-up to wake up the CPUs.
	${NBODY} --bodies 32 --iterations 4 &>/dev/null

	# Now run with the requested arguments.
	show_command env ${OMP_PARAMS[@]} ${NBODY} ${ARGS[@]}

	echo
done

exit 0
